name: Main Semantic Release

on:
  push:
    branches:
      - main

jobs:
  submit_extension:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version-file: '.nvmrc'

      - name: Install Dependencies
        run: npm install    

      - name: Build Project
        run: npm run build        

      - name: Create Archive
        run: npm run archive       

      - name: Run release
        id: release
        env:
          GH_TOKEN: ${{ github.token }}
          NPM_TOKEN: ${{ github.token }}
          GIT_AUTHOR_NAME: semantic-release-akfdev-com
          GIT_AUTHOR_EMAIL: semantic-release-bot@akfdev.com
          GIT_COMMITTER_NAME: semantic-release-bot-akfedv-com
          GIT_COMMITTER_EMAIL: semantic-release-bot@akfdev.com
        run: |
          npm config set registry https://npm.pkg.github.com/
          npm config set //npm.pkg.github.com/:_authToken $GH_TOKEN
          npx semantic-release

      # Step 5: Update package.json with the new version
      - name: Update package.json
        if: steps.release.outputs.new-release-published == 'true'
        run: |
          echo "::set-output name=version::$(node -p "require('./package.json').version")"
        id: update_package

      # Step 6: Build the product
      - name: Build product
        run: npm run build # Replace with your build command

      - name: Build Archive
        run: npm run archive # Replace with your build command
      # Step 7: Archive the build artifact

      - name: Debug upload_url
        run: | 
          echo "Upload URL: ${{ steps.semantic_release.outputs.upload_url }}"


      - name: Fetch release upload URL
        id: fetch_release
        run: |
          TAG_NAME=$(jq -r ".tag_name" <<< $(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}))
          UPLOAD_URL=$(jq -r ".upload_url" <<< $(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME))
          echo "UPLOAD_URL=$UPLOAD_URL" >> $GITHUB_ENV

      # Step 8: Upload the artifact as a GitHub release asset
      - name: Upload asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.fetch_release.outputs.upload_url }}
          asset_path: ./archive/archive.zip
          asset_name: archive.zip
          asset_content_type: application/zip
